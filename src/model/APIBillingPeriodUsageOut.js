/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.15
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.NamSorApiV2) {
      root.NamSorApiV2 = {};
    }
    root.NamSorApiV2.APIBillingPeriodUsageOut = factory(root.NamSorApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The APIBillingPeriodUsageOut model module.
   * @module model/APIBillingPeriodUsageOut
   * @version 2.0.15
   */

  /**
   * Constructs a new <code>APIBillingPeriodUsageOut</code>.
   * The current billing period.
   * @alias module:model/APIBillingPeriodUsageOut
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>APIBillingPeriodUsageOut</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/APIBillingPeriodUsageOut} obj Optional instance to populate.
   * @return {module:model/APIBillingPeriodUsageOut} The populated <code>APIBillingPeriodUsageOut</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('apiKey')) {
        obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
      }
      if (data.hasOwnProperty('subscriptionStarted')) {
        obj['subscriptionStarted'] = ApiClient.convertToType(data['subscriptionStarted'], 'Number');
      }
      if (data.hasOwnProperty('periodStarted')) {
        obj['periodStarted'] = ApiClient.convertToType(data['periodStarted'], 'Number');
      }
      if (data.hasOwnProperty('periodEnded')) {
        obj['periodEnded'] = ApiClient.convertToType(data['periodEnded'], 'Number');
      }
      if (data.hasOwnProperty('stripeCurrentPeriodEnd')) {
        obj['stripeCurrentPeriodEnd'] = ApiClient.convertToType(data['stripeCurrentPeriodEnd'], 'Number');
      }
      if (data.hasOwnProperty('stripeCurrentPeriodStart')) {
        obj['stripeCurrentPeriodStart'] = ApiClient.convertToType(data['stripeCurrentPeriodStart'], 'Number');
      }
      if (data.hasOwnProperty('billingStatus')) {
        obj['billingStatus'] = ApiClient.convertToType(data['billingStatus'], 'String');
      }
      if (data.hasOwnProperty('usage')) {
        obj['usage'] = ApiClient.convertToType(data['usage'], 'Number');
      }
      if (data.hasOwnProperty('softLimit')) {
        obj['softLimit'] = ApiClient.convertToType(data['softLimit'], 'Number');
      }
      if (data.hasOwnProperty('hardLimit')) {
        obj['hardLimit'] = ApiClient.convertToType(data['hardLimit'], 'Number');
      }
    }
    return obj;
  }

  /**
   * User API Key.
   * @member {String} apiKey
   */
  exports.prototype['apiKey'] = undefined;
  /**
   * Datetime when the user subscribed to the plan.
   * @member {Number} subscriptionStarted
   */
  exports.prototype['subscriptionStarted'] = undefined;
  /**
   * Datetime when the the plan's current period started.
   * @member {Number} periodStarted
   */
  exports.prototype['periodStarted'] = undefined;
  /**
   * Datetime when the the plan's current period endend.
   * @member {Number} periodEnded
   */
  exports.prototype['periodEnded'] = undefined;
  /**
   * Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
   * @member {Number} stripeCurrentPeriodEnd
   */
  exports.prototype['stripeCurrentPeriodEnd'] = undefined;
  /**
   * Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
   * @member {Number} stripeCurrentPeriodStart
   */
  exports.prototype['stripeCurrentPeriodStart'] = undefined;
  /**
   * Current period billing status ex OPEN.
   * @member {String} billingStatus
   */
  exports.prototype['billingStatus'] = undefined;
  /**
   * Current period usage in units (NB some API endpoints use more than one unit).
   * @member {Number} usage
   */
  exports.prototype['usage'] = undefined;
  /**
   * Current period soft limit (reaching the limit sends an email notification).
   * @member {Number} softLimit
   */
  exports.prototype['softLimit'] = undefined;
  /**
   * Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
   * @member {Number} hardLimit
   */
  exports.prototype['hardLimit'] = undefined;



  return exports;
}));


