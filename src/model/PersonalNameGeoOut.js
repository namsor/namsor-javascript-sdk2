/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.15
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.NamSorApiV2) {
      root.NamSorApiV2 = {};
    }
    root.NamSorApiV2.PersonalNameGeoOut = factory(root.NamSorApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The PersonalNameGeoOut model module.
   * @module model/PersonalNameGeoOut
   * @version 2.0.15
   */

  /**
   * Constructs a new <code>PersonalNameGeoOut</code>.
   * Classified geo names
   * @alias module:model/PersonalNameGeoOut
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>PersonalNameGeoOut</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PersonalNameGeoOut} obj Optional instance to populate.
   * @return {module:model/PersonalNameGeoOut} The populated <code>PersonalNameGeoOut</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('script')) {
        obj['script'] = ApiClient.convertToType(data['script'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('score')) {
        obj['score'] = ApiClient.convertToType(data['score'], 'Number');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('countryAlt')) {
        obj['countryAlt'] = ApiClient.convertToType(data['countryAlt'], 'String');
      }
      if (data.hasOwnProperty('region')) {
        obj['region'] = ApiClient.convertToType(data['region'], 'String');
      }
      if (data.hasOwnProperty('topRegion')) {
        obj['topRegion'] = ApiClient.convertToType(data['topRegion'], 'String');
      }
      if (data.hasOwnProperty('subRegion')) {
        obj['subRegion'] = ApiClient.convertToType(data['subRegion'], 'String');
      }
      if (data.hasOwnProperty('countriesTop')) {
        obj['countriesTop'] = ApiClient.convertToType(data['countriesTop'], ['String']);
      }
      if (data.hasOwnProperty('probabilityCalibrated')) {
        obj['probabilityCalibrated'] = ApiClient.convertToType(data['probabilityCalibrated'], 'Number');
      }
      if (data.hasOwnProperty('probabilityAltCalibrated')) {
        obj['probabilityAltCalibrated'] = ApiClient.convertToType(data['probabilityAltCalibrated'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {String} script
   */
  exports.prototype['script'] = undefined;
  /**
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The input name.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * @member {Number} score
   */
  exports.prototype['score'] = undefined;
  /**
   * Most likely country 
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Second best alternative : country 
   * @member {String} countryAlt
   */
  exports.prototype['countryAlt'] = undefined;
  /**
   * Most likely region (based on country ISO2 code)
   * @member {String} region
   */
  exports.prototype['region'] = undefined;
  /**
   * Most likely top region (based on country ISO2 code)
   * @member {String} topRegion
   */
  exports.prototype['topRegion'] = undefined;
  /**
   * Most likely sub region (based on country ISO2 code)
   * @member {String} subRegion
   */
  exports.prototype['subRegion'] = undefined;
  /**
   * List countries (top 10)
   * @member {Array.<String>} countriesTop
   */
  exports.prototype['countriesTop'] = undefined;
  /**
   * The calibrated probability for country to have been guessed correctly.
   * @member {Number} probabilityCalibrated
   */
  exports.prototype['probabilityCalibrated'] = undefined;
  /**
   * The calibrated probability for country OR countryAlt to have been guessed correctly.
   * @member {Number} probabilityAltCalibrated
   */
  exports.prototype['probabilityAltCalibrated'] = undefined;



  return exports;
}));


