/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.namsor.sdk2.invoke/ApiClient', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingHistoryOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/CurrenciesOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/InlineObject', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/SoftwareVersionOut', 'com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.namsor.sdk2.model/APIKeyOut'), require('../com.namsor.sdk2.model/APIPeriodUsageOut'), require('../com.namsor.sdk2.model/APIPlanSubscriptionOut'), require('../com.namsor.sdk2.model/APIPlansOut'), require('../com.namsor.sdk2.model/BillingHistoryOut'), require('../com.namsor.sdk2.model/BillingInfoInOut'), require('../com.namsor.sdk2.model/CurrenciesOut'), require('../com.namsor.sdk2.model/InlineObject'), require('../com.namsor.sdk2.model/SoftwareVersionOut'), require('../com.namsor.sdk2.model/SystemMetricsOut'));
  } else {
    // Browser globals (root is window)
    if (!root.NamSorApiV2) {
      root.NamSorApiV2 = {};
    }
    root.NamSorApiV2.AdminApi = factory(root.NamSorApiV2.ApiClient, root.NamSorApiV2.APIKeyOut, root.NamSorApiV2.APIPeriodUsageOut, root.NamSorApiV2.APIPlanSubscriptionOut, root.NamSorApiV2.APIPlansOut, root.NamSorApiV2.BillingHistoryOut, root.NamSorApiV2.BillingInfoInOut, root.NamSorApiV2.CurrenciesOut, root.NamSorApiV2.InlineObject, root.NamSorApiV2.SoftwareVersionOut, root.NamSorApiV2.SystemMetricsOut);
  }
}(this, function(ApiClient, APIKeyOut, APIPeriodUsageOut, APIPlanSubscriptionOut, APIPlansOut, BillingHistoryOut, BillingInfoInOut, CurrenciesOut, InlineObject, SoftwareVersionOut, SystemMetricsOut) {
  'use strict';

  /**
   * Admin service.
   * @module com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi
   * @version 2.0.10
   */

  /**
   * Constructs a new AdminApi. 
   * @alias module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi
   * @class
   * @param {module:com.namsor.sdk2.invoke/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:com.namsor.sdk2.invoke/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCredits operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~addCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add usage credits to an API Key.
     * @param {String} apiKey 
     * @param {Number} usageCredits 
     * @param {String} userMessage 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~addCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut}
     */
    this.addCredits = function(apiKey, usageCredits, userMessage, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling addCredits");
      }

      // verify the required parameter 'usageCredits' is set
      if (usageCredits === undefined || usageCredits === null) {
        throw new Error("Missing the required parameter 'usageCredits' when calling addCredits");
      }

      // verify the required parameter 'userMessage' is set
      if (userMessage === undefined || userMessage === null) {
        throw new Error("Missing the required parameter 'userMessage' when calling addCredits");
      }


      var pathParams = {
        'apiKey': apiKey,
        'usageCredits': usageCredits,
        'userMessage': userMessage
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SystemMetricsOut;

      return this.apiClient.callApi(
        '/api2/json/addCredits/{apiKey}/{usageCredits}/{userMessage}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymize operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~anonymizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate anonymization for a source.
     * @param {String} source 
     * @param {Boolean} anonymized 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~anonymizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.anonymize = function(source, anonymized, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling anonymize");
      }

      // verify the required parameter 'anonymized' is set
      if (anonymized === undefined || anonymized === null) {
        throw new Error("Missing the required parameter 'anonymized' when calling anonymize");
      }


      var pathParams = {
        'source': source,
        'anonymized': anonymized
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/anonymize/{source}/{anonymized}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatus operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prints the current status of the classifiers.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut}
     */
    this.apiStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlansOut;

      return this.apiClient.callApi(
        '/api2/json/apiStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsage operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print current API usage.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut}
     */
    this.apiUsage = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPeriodUsageOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistory operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut}
     */
    this.apiUsageHistory = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPeriodUsageOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsageHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistoryAggregate operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageHistoryAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~apiUsageHistoryAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut}
     */
    this.apiUsageHistoryAggregate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPeriodUsageOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsageHistoryAggregate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the availablePlans operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availablePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available plans in the default currency (usd).
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availablePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut}
     */
    this.availablePlans = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlansOut;

      return this.apiClient.callApi(
        '/api2/json/availablePlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the availablePlans1 operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availablePlans1Callback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available plans in the user&#39;s preferred currency.
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availablePlans1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut}
     */
    this.availablePlans1 = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling availablePlans1");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlansOut;

      return this.apiClient.callApi(
        '/api2/json/availablePlans/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the availableServices operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availableServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~availableServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut}
     */
    this.availableServices = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlansOut;

      return this.apiClient.callApi(
        '/api2/json/apiServices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCurrencies operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/CurrenciesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List possible currency options for billing (USD, EUR, GBP, ...)
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/CurrenciesOut}
     */
    this.billingCurrencies = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CurrenciesOut;

      return this.apiClient.callApi(
        '/api2/json/billingCurrencies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the billingHistory operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingHistoryOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the history billing information (invoices paid via Stripe or manually).
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingHistoryOut}
     */
    this.billingHistory = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling billingHistory");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BillingHistoryOut;

      return this.apiClient.callApi(
        '/api2/json/billingHistory/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the billingInfo operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the billing information (company name, address, phone, vat ID)
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~billingInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut}
     */
    this.billingInfo = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling billingInfo");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BillingInfoInOut;

      return this.apiClient.callApi(
        '/api2/json/billingInfo/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the charge operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~chargeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
     * @param {Object} opts Optional parameters
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/InlineObject} opts.inlineObject 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~chargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.charge = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/charge', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the corporateKey operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~corporateKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setting an API Key to a corporate status.
     * @param {String} apiKey 
     * @param {Boolean} corporate 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~corporateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.corporateKey = function(apiKey, corporate, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling corporateKey");
      }

      // verify the required parameter 'corporate' is set
      if (corporate === undefined || corporate === null) {
        throw new Error("Missing the required parameter 'corporate' when calling corporateKey");
      }


      var pathParams = {
        'apiKey': apiKey,
        'corporate': corporate
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/corporateKey/{apiKey}/{corporate}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the debugLevel operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~debugLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update debug level for a classifier
     * @param {String} logger 
     * @param {String} level 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~debugLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.debugLevel = function(logger, level, callback) {
      var postBody = null;

      // verify the required parameter 'logger' is set
      if (logger === undefined || logger === null) {
        throw new Error("Missing the required parameter 'logger' when calling debugLevel");
      }

      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling debugLevel");
      }


      var pathParams = {
        'logger': logger,
        'level': level
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/debugLevel/{logger}/{level}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flush operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~flushCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flush counters.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~flushCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.flush = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/flush', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateCache operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~invalidateCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate system caches.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~invalidateCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.invalidateCache = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/invalidateCache', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the learnable operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~learnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate learning from a source.
     * @param {String} source 
     * @param {Boolean} learnable 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~learnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.learnable = function(source, learnable, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling learnable");
      }

      // verify the required parameter 'learnable' is set
      if (learnable === undefined || learnable === null) {
        throw new Error("Missing the required parameter 'learnable' when calling learnable");
      }


      var pathParams = {
        'source': source,
        'learnable': learnable
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/learnable/{source}/{learnable}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the namsorCounter operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~namsorCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SoftwareVersionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the overall API counter
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~namsorCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SoftwareVersionOut}
     */
    this.namsorCounter = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SoftwareVersionOut;

      return this.apiClient.callApi(
        '/api2/json/namsorCounter', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInfo operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~paymentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Stripe payment information associated with the current google auth session token.
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~paymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.paymentInfo = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling paymentInfo");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/paymentInfo/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the procureKey operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~procureKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~procureKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.procureKey = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling procureKey");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/procureKey/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redeployUI operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~redeployUICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeploy UI from current dev branch.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~redeployUICallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.redeployUI = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/redeployUI', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redeployUI1 operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~redeployUI1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeploy UI from current dev branch.
     * @param {Boolean} live 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~redeployUI1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.redeployUI1 = function(live, callback) {
      var postBody = null;

      // verify the required parameter 'live' is set
      if (live === undefined || live === null) {
        throw new Error("Missing the required parameter 'live' when calling redeployUI1");
      }


      var pathParams = {
        'live': live
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/redeployUI/{live}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserAccount operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~removeUserAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the user account.
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~removeUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut}
     */
    this.removeUserAccount = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling removeUserAccount");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlanSubscriptionOut;

      return this.apiClient.callApi(
        '/api2/json/removeUserAccount/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserAccountOnBehalf operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~removeUserAccountOnBehalfCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove (on behalf) a user account.
     * @param {String} apiKey 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~removeUserAccountOnBehalfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut}
     */
    this.removeUserAccountOnBehalf = function(apiKey, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling removeUserAccountOnBehalf");
      }


      var pathParams = {
        'apiKey': apiKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlanSubscriptionOut;

      return this.apiClient.callApi(
        '/api2/json/removeUserAccountOnBehalf/{apiKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shutdown operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~shutdownCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop learning and shutdown system.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~shutdownCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.shutdown = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/shutdown', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the softwareVersion operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~softwareVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SoftwareVersionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current software version
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~softwareVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SoftwareVersionOut}
     */
    this.softwareVersion = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SoftwareVersionOut;

      return this.apiClient.callApi(
        '/api2/json/softwareVersion', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sourceStats operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~sourceStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print basic source statistics.
     * @param {String} source 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~sourceStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut}
     */
    this.sourceStats = function(source, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling sourceStats");
      }


      var pathParams = {
        'source': source
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SystemMetricsOut;

      return this.apiClient.callApi(
        '/api2/json/sourceStats/{source}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stats operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~statsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print basic system statistics.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~statsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/SystemMetricsOut}
     */
    this.stats = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SystemMetricsOut;

      return this.apiClient.callApi(
        '/api2/json/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeConnect operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~stripeConnectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connects a Stripe Account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope 
     * @param {String} opts.code 
     * @param {String} opts.error 
     * @param {String} opts.errorDescription 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~stripeConnectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stripeConnect = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'scope': opts['scope'],
        'code': opts['code'],
        'error': opts['error'],
        'error_description': opts['errorDescription'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/stripeConnect', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribePlan operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~subscribePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a give API plan, using the user&#39;s preferred or default currency.
     * @param {String} planName 
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~subscribePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut}
     */
    this.subscribePlan = function(planName, token, callback) {
      var postBody = null;

      // verify the required parameter 'planName' is set
      if (planName === undefined || planName === null) {
        throw new Error("Missing the required parameter 'planName' when calling subscribePlan");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling subscribePlan");
      }


      var pathParams = {
        'planName': planName,
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlanSubscriptionOut;

      return this.apiClient.callApi(
        '/api2/json/subscribePlan/{planName}/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribePlanOnBehalf operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~subscribePlanOnBehalfCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a give API plan, using the user&#39;s preferred or default currency (admin only).
     * @param {String} planName 
     * @param {String} apiKey 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~subscribePlanOnBehalfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlanSubscriptionOut}
     */
    this.subscribePlanOnBehalf = function(planName, apiKey, callback) {
      var postBody = null;

      // verify the required parameter 'planName' is set
      if (planName === undefined || planName === null) {
        throw new Error("Missing the required parameter 'planName' when calling subscribePlanOnBehalf");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling subscribePlanOnBehalf");
      }


      var pathParams = {
        'planName': planName,
        'apiKey': apiKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlanSubscriptionOut;

      return this.apiClient.callApi(
        '/api2/json/subscribePlanOnBehalf/{planName}/{apiKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the taxonomyClasses operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~taxonomyClassesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print the taxonomy classes valid for the given classifier.
     * @param {String} classifierName 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~taxonomyClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPlansOut}
     */
    this.taxonomyClasses = function(classifierName, callback) {
      var postBody = null;

      // verify the required parameter 'classifierName' is set
      if (classifierName === undefined || classifierName === null) {
        throw new Error("Missing the required parameter 'classifierName' when calling taxonomyClasses");
      }


      var pathParams = {
        'classifierName': classifierName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPlansOut;

      return this.apiClient.callApi(
        '/api2/json/taxonomyClasses/{classifierName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBillingInfo operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updateBillingInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets or update the billing information (company name, address, phone, vat ID)
     * @param {String} token 
     * @param {Object} opts Optional parameters
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut} opts.billingInfoInOut 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updateBillingInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/BillingInfoInOut}
     */
    this.updateBillingInfo = function(token, opts, callback) {
      opts = opts || {};
      var postBody = opts['billingInfoInOut'];

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBillingInfo");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = BillingInfoInOut;

      return this.apiClient.callApi(
        '/api2/json/updateBillingInfo/{token}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLimit operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updateLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
     * @param {Number} usageLimit 
     * @param {Boolean} hardOrSoft 
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updateLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIPeriodUsageOut}
     */
    this.updateLimit = function(usageLimit, hardOrSoft, token, callback) {
      var postBody = null;

      // verify the required parameter 'usageLimit' is set
      if (usageLimit === undefined || usageLimit === null) {
        throw new Error("Missing the required parameter 'usageLimit' when calling updateLimit");
      }

      // verify the required parameter 'hardOrSoft' is set
      if (hardOrSoft === undefined || hardOrSoft === null) {
        throw new Error("Missing the required parameter 'hardOrSoft' when calling updateLimit");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateLimit");
      }


      var pathParams = {
        'usageLimit': usageLimit,
        'hardOrSoft': hardOrSoft,
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPeriodUsageOut;

      return this.apiClient.callApi(
        '/api2/json/updateLimit/{usageLimit}/{hardOrSoft}/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentDefault operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updatePaymentDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the default Stripe card associated with the current google auth session token.
     * @param {String} defautSourceId 
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~updatePaymentDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.updatePaymentDefault = function(defautSourceId, token, callback) {
      var postBody = null;

      // verify the required parameter 'defautSourceId' is set
      if (defautSourceId === undefined || defautSourceId === null) {
        throw new Error("Missing the required parameter 'defautSourceId' when calling updatePaymentDefault");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updatePaymentDefault");
      }


      var pathParams = {
        'defautSourceId': defautSourceId,
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/updatePaymentDefault/{defautSourceId}/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userInfo operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~userInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user profile associated with the current google auth session token.
     * @param {String} token 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~userInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.userInfo = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userInfo");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/userInfo/{token}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyEmail operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~verifyEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies an email, based on token sent to that email
     * @param {String} emailToken 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~verifyEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.verifyEmail = function(emailToken, callback) {
      var postBody = null;

      // verify the required parameter 'emailToken' is set
      if (emailToken === undefined || emailToken === null) {
        throw new Error("Missing the required parameter 'emailToken' when calling verifyEmail");
      }


      var pathParams = {
        'emailToken': emailToken
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/verifyEmail/{emailToken}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyRemoveEmail operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~verifyRemoveEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies an email, based on token sent to that email
     * @param {String} emailToken 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~verifyRemoveEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.namsor.sdk2.invoke/com.namsor.sdk2.model/APIKeyOut}
     */
    this.verifyRemoveEmail = function(emailToken, callback) {
      var postBody = null;

      // verify the required parameter 'emailToken' is set
      if (emailToken === undefined || emailToken === null) {
        throw new Error("Missing the required parameter 'emailToken' when calling verifyRemoveEmail");
      }


      var pathParams = {
        'emailToken': emailToken
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIKeyOut;

      return this.apiClient.callApi(
        '/api2/json/verifyRemoveEmail/{emailToken}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vet operation.
     * @callback module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~vetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vetting of a source.
     * @param {String} source 
     * @param {Boolean} vetted 
     * @param {module:com.namsor.sdk2.invoke/com.namsor.sdk2.api/AdminApi~vetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.vet = function(source, vetted, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling vet");
      }

      // verify the required parameter 'vetted' is set
      if (vetted === undefined || vetted === null) {
        throw new Error("Missing the required parameter 'vetted' when calling vet");
      }


      var pathParams = {
        'source': source,
        'vetted': vetted
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/vetting/{source}/{vetted}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
