/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.15
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchFirstLastNameGenderIn', 'model/BatchFirstLastNameGenderedOut', 'model/BatchFirstLastNameIn', 'model/BatchMatchPersonalFirstLastNameIn', 'model/BatchNameMatchCandidatesOut', 'model/BatchNameMatchedOut', 'model/BatchPersonalNameGenderedOut', 'model/BatchPersonalNameIn', 'model/BatchPersonalNameParsedOut', 'model/FeedbackLoopOut', 'model/FirstLastNameGenderedOut', 'model/NameMatchCandidatesOut', 'model/NameMatchedOut', 'model/PersonalNameGenderedOut', 'model/PersonalNameParsedOut'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchFirstLastNameGenderIn'), require('../model/BatchFirstLastNameGenderedOut'), require('../model/BatchFirstLastNameIn'), require('../model/BatchMatchPersonalFirstLastNameIn'), require('../model/BatchNameMatchCandidatesOut'), require('../model/BatchNameMatchedOut'), require('../model/BatchPersonalNameGenderedOut'), require('../model/BatchPersonalNameIn'), require('../model/BatchPersonalNameParsedOut'), require('../model/FeedbackLoopOut'), require('../model/FirstLastNameGenderedOut'), require('../model/NameMatchCandidatesOut'), require('../model/NameMatchedOut'), require('../model/PersonalNameGenderedOut'), require('../model/PersonalNameParsedOut'));
  } else {
    // Browser globals (root is window)
    if (!root.NamSorApiV2) {
      root.NamSorApiV2 = {};
    }
    root.NamSorApiV2.JapaneseApi = factory(root.NamSorApiV2.ApiClient, root.NamSorApiV2.BatchFirstLastNameGenderIn, root.NamSorApiV2.BatchFirstLastNameGenderedOut, root.NamSorApiV2.BatchFirstLastNameIn, root.NamSorApiV2.BatchMatchPersonalFirstLastNameIn, root.NamSorApiV2.BatchNameMatchCandidatesOut, root.NamSorApiV2.BatchNameMatchedOut, root.NamSorApiV2.BatchPersonalNameGenderedOut, root.NamSorApiV2.BatchPersonalNameIn, root.NamSorApiV2.BatchPersonalNameParsedOut, root.NamSorApiV2.FeedbackLoopOut, root.NamSorApiV2.FirstLastNameGenderedOut, root.NamSorApiV2.NameMatchCandidatesOut, root.NamSorApiV2.NameMatchedOut, root.NamSorApiV2.PersonalNameGenderedOut, root.NamSorApiV2.PersonalNameParsedOut);
  }
}(this, function(ApiClient, BatchFirstLastNameGenderIn, BatchFirstLastNameGenderedOut, BatchFirstLastNameIn, BatchMatchPersonalFirstLastNameIn, BatchNameMatchCandidatesOut, BatchNameMatchedOut, BatchPersonalNameGenderedOut, BatchPersonalNameIn, BatchPersonalNameParsedOut, FeedbackLoopOut, FirstLastNameGenderedOut, NameMatchCandidatesOut, NameMatchedOut, PersonalNameGenderedOut, PersonalNameParsedOut) {
  'use strict';

  /**
   * Japanese service.
   * @module api/JapaneseApi
   * @version 2.0.15
   */

  /**
   * Constructs a new JapaneseApi. 
   * @alias module:api/JapaneseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the genderJapaneseNameFull operation.
     * @callback module:api/JapaneseApi~genderJapaneseNameFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * @param {String} japaneseName 
     * @param {module:api/JapaneseApi~genderJapaneseNameFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGenderedOut}
     */
    this.genderJapaneseNameFull = function(japaneseName, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseName' is set
      if (japaneseName === undefined || japaneseName === null) {
        throw new Error("Missing the required parameter 'japaneseName' when calling genderJapaneseNameFull");
      }


      var pathParams = {
        'japaneseName': japaneseName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PersonalNameGenderedOut;

      return this.apiClient.callApi(
        '/api2/json/genderJapaneseNameFull/{japaneseName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the genderJapaneseNameFullBatch operation.
     * @callback module:api/JapaneseApi~genderJapaneseNameFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 full names
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} opts.batchPersonalNameIn A list of personal names
     * @param {module:api/JapaneseApi~genderJapaneseNameFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGenderedOut}
     */
    this.genderJapaneseNameFullBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchPersonalNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchPersonalNameGenderedOut;

      return this.apiClient.callApi(
        '/api2/json/genderJapaneseNameFullBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the genderJapaneseNamePinyin operation.
     * @callback module:api/JapaneseApi~genderJapaneseNamePinyinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * @param {String} japaneseSurname 
     * @param {String} japaneseGivenName 
     * @param {module:api/JapaneseApi~genderJapaneseNamePinyinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGenderedOut}
     */
    this.genderJapaneseNamePinyin = function(japaneseSurname, japaneseGivenName, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurname' is set
      if (japaneseSurname === undefined || japaneseSurname === null) {
        throw new Error("Missing the required parameter 'japaneseSurname' when calling genderJapaneseNamePinyin");
      }

      // verify the required parameter 'japaneseGivenName' is set
      if (japaneseGivenName === undefined || japaneseGivenName === null) {
        throw new Error("Missing the required parameter 'japaneseGivenName' when calling genderJapaneseNamePinyin");
      }


      var pathParams = {
        'japaneseSurname': japaneseSurname,
        'japaneseGivenName': japaneseGivenName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FirstLastNameGenderedOut;

      return this.apiClient.callApi(
        '/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the genderJapaneseNamePinyinBatch operation.
     * @callback module:api/JapaneseApi~genderJapaneseNamePinyinBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} opts.batchFirstLastNameIn A list of names, with country code.
     * @param {module:api/JapaneseApi~genderJapaneseNamePinyinBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGenderedOut}
     */
    this.genderJapaneseNamePinyinBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchFirstLastNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchFirstLastNameGenderedOut;

      return this.apiClient.callApi(
        '/api2/json/genderJapaneseNameBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameGenderKanjiCandidatesBatch operation.
     * @callback module:api/JapaneseApi~japaneseNameGenderKanjiCandidatesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGenderIn} opts.batchFirstLastNameGenderIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender
     * @param {module:api/JapaneseApi~japaneseNameGenderKanjiCandidatesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchCandidatesOut}
     */
    this.japaneseNameGenderKanjiCandidatesBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchFirstLastNameGenderIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchNameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameGenderKanjiCandidatesBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameKanjiCandidates operation.
     * @callback module:api/JapaneseApi~japaneseNameKanjiCandidatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
     * @param {String} japaneseSurnameLatin 
     * @param {String} japaneseGivenNameLatin 
     * @param {String} knownGender 
     * @param {module:api/JapaneseApi~japaneseNameKanjiCandidatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchCandidatesOut}
     */
    this.japaneseNameKanjiCandidates = function(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurnameLatin' is set
      if (japaneseSurnameLatin === undefined || japaneseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameKanjiCandidates");
      }

      // verify the required parameter 'japaneseGivenNameLatin' is set
      if (japaneseGivenNameLatin === undefined || japaneseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameKanjiCandidates");
      }

      // verify the required parameter 'knownGender' is set
      if (knownGender === undefined || knownGender === null) {
        throw new Error("Missing the required parameter 'knownGender' when calling japaneseNameKanjiCandidates");
      }


      var pathParams = {
        'japaneseSurnameLatin': japaneseSurnameLatin,
        'japaneseGivenNameLatin': japaneseGivenNameLatin,
        'knownGender': knownGender
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameKanjiCandidates1 operation.
     * @callback module:api/JapaneseApi~japaneseNameKanjiCandidates1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * @param {String} japaneseSurnameLatin 
     * @param {String} japaneseGivenNameLatin 
     * @param {module:api/JapaneseApi~japaneseNameKanjiCandidates1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchCandidatesOut}
     */
    this.japaneseNameKanjiCandidates1 = function(japaneseSurnameLatin, japaneseGivenNameLatin, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurnameLatin' is set
      if (japaneseSurnameLatin === undefined || japaneseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameKanjiCandidates1");
      }

      // verify the required parameter 'japaneseGivenNameLatin' is set
      if (japaneseGivenNameLatin === undefined || japaneseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameKanjiCandidates1");
      }


      var pathParams = {
        'japaneseSurnameLatin': japaneseSurnameLatin,
        'japaneseGivenNameLatin': japaneseGivenNameLatin
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameKanjiCandidatesBatch operation.
     * @callback module:api/JapaneseApi~japaneseNameKanjiCandidatesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} opts.batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
     * @param {module:api/JapaneseApi~japaneseNameKanjiCandidatesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchCandidatesOut}
     */
    this.japaneseNameKanjiCandidatesBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchFirstLastNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchNameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameKanjiCandidatesBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameLatinCandidates operation.
     * @callback module:api/JapaneseApi~japaneseNameLatinCandidatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Romanize japanese name, based on the name in Kanji.
     * @param {String} japaneseSurnameKanji 
     * @param {String} japaneseGivenNameKanji 
     * @param {module:api/JapaneseApi~japaneseNameLatinCandidatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchCandidatesOut}
     */
    this.japaneseNameLatinCandidates = function(japaneseSurnameKanji, japaneseGivenNameKanji, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurnameKanji' is set
      if (japaneseSurnameKanji === undefined || japaneseSurnameKanji === null) {
        throw new Error("Missing the required parameter 'japaneseSurnameKanji' when calling japaneseNameLatinCandidates");
      }

      // verify the required parameter 'japaneseGivenNameKanji' is set
      if (japaneseGivenNameKanji === undefined || japaneseGivenNameKanji === null) {
        throw new Error("Missing the required parameter 'japaneseGivenNameKanji' when calling japaneseNameLatinCandidates");
      }


      var pathParams = {
        'japaneseSurnameKanji': japaneseSurnameKanji,
        'japaneseGivenNameKanji': japaneseGivenNameKanji
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameLatinCandidatesBatch operation.
     * @callback module:api/JapaneseApi~japaneseNameLatinCandidatesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Romanize japanese names, based on the name in KANJI
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} opts.batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
     * @param {module:api/JapaneseApi~japaneseNameLatinCandidatesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchCandidatesOut}
     */
    this.japaneseNameLatinCandidatesBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchFirstLastNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchNameMatchCandidatesOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameLatinCandidatesBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameMatch operation.
     * @callback module:api/JapaneseApi~japaneseNameMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * @param {String} japaneseSurnameLatin 
     * @param {String} japaneseGivenNameLatin 
     * @param {String} japaneseName 
     * @param {module:api/JapaneseApi~japaneseNameMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchedOut}
     */
    this.japaneseNameMatch = function(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurnameLatin' is set
      if (japaneseSurnameLatin === undefined || japaneseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatch");
      }

      // verify the required parameter 'japaneseGivenNameLatin' is set
      if (japaneseGivenNameLatin === undefined || japaneseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatch");
      }

      // verify the required parameter 'japaneseName' is set
      if (japaneseName === undefined || japaneseName === null) {
        throw new Error("Missing the required parameter 'japaneseName' when calling japaneseNameMatch");
      }


      var pathParams = {
        'japaneseSurnameLatin': japaneseSurnameLatin,
        'japaneseGivenNameLatin': japaneseGivenNameLatin,
        'japaneseName': japaneseName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NameMatchedOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameMatchBatch operation.
     * @callback module:api/JapaneseApi~japaneseNameMatchBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchMatchPersonalFirstLastNameIn} opts.batchMatchPersonalFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
     * @param {module:api/JapaneseApi~japaneseNameMatchBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchedOut}
     */
    this.japaneseNameMatchBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchMatchPersonalFirstLastNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchNameMatchedOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameMatchBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the japaneseNameMatchFeedbackLoop operation.
     * @callback module:api/JapaneseApi~japaneseNameMatchFeedbackLoopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedbackLoopOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * @param {String} japaneseSurnameLatin 
     * @param {String} japaneseGivenNameLatin 
     * @param {String} japaneseName 
     * @param {module:api/JapaneseApi~japaneseNameMatchFeedbackLoopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedbackLoopOut}
     */
    this.japaneseNameMatchFeedbackLoop = function(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseSurnameLatin' is set
      if (japaneseSurnameLatin === undefined || japaneseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatchFeedbackLoop");
      }

      // verify the required parameter 'japaneseGivenNameLatin' is set
      if (japaneseGivenNameLatin === undefined || japaneseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatchFeedbackLoop");
      }

      // verify the required parameter 'japaneseName' is set
      if (japaneseName === undefined || japaneseName === null) {
        throw new Error("Missing the required parameter 'japaneseName' when calling japaneseNameMatchFeedbackLoop");
      }


      var pathParams = {
        'japaneseSurnameLatin': japaneseSurnameLatin,
        'japaneseGivenNameLatin': japaneseGivenNameLatin,
        'japaneseName': japaneseName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FeedbackLoopOut;

      return this.apiClient.callApi(
        '/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseJapaneseName operation.
     * @callback module:api/JapaneseApi~parseJapaneseNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * @param {String} japaneseName 
     * @param {module:api/JapaneseApi~parseJapaneseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameParsedOut}
     */
    this.parseJapaneseName = function(japaneseName, callback) {
      var postBody = null;

      // verify the required parameter 'japaneseName' is set
      if (japaneseName === undefined || japaneseName === null) {
        throw new Error("Missing the required parameter 'japaneseName' when calling parseJapaneseName");
      }


      var pathParams = {
        'japaneseName': japaneseName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PersonalNameParsedOut;

      return this.apiClient.callApi(
        '/api2/json/parseJapaneseName/{japaneseName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseJapaneseNameBatch operation.
     * @callback module:api/JapaneseApi~parseJapaneseNameBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} opts.batchPersonalNameIn A list of personal names
     * @param {module:api/JapaneseApi~parseJapaneseNameBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameParsedOut}
     */
    this.parseJapaneseNameBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['batchPersonalNameIn'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchPersonalNameParsedOut;

      return this.apiClient.callApi(
        '/api2/json/parseJapaneseNameBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
