/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.15
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APIClassifierTaxonomyOut', 'model/APIClassifiersStatusOut', 'model/APIPeriodUsageOut', 'model/APIServicesOut', 'model/APIUsageAggregatedOut', 'model/APIUsageHistoryOut', 'model/SoftwareVersionOut'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/APIClassifierTaxonomyOut'), require('../model/APIClassifiersStatusOut'), require('../model/APIPeriodUsageOut'), require('../model/APIServicesOut'), require('../model/APIUsageAggregatedOut'), require('../model/APIUsageHistoryOut'), require('../model/SoftwareVersionOut'));
  } else {
    // Browser globals (root is window)
    if (!root.NamSorApiV2) {
      root.NamSorApiV2 = {};
    }
    root.NamSorApiV2.AdminApi = factory(root.NamSorApiV2.ApiClient, root.NamSorApiV2.APIClassifierTaxonomyOut, root.NamSorApiV2.APIClassifiersStatusOut, root.NamSorApiV2.APIPeriodUsageOut, root.NamSorApiV2.APIServicesOut, root.NamSorApiV2.APIUsageAggregatedOut, root.NamSorApiV2.APIUsageHistoryOut, root.NamSorApiV2.SoftwareVersionOut);
  }
}(this, function(ApiClient, APIClassifierTaxonomyOut, APIClassifiersStatusOut, APIPeriodUsageOut, APIServicesOut, APIUsageAggregatedOut, APIUsageHistoryOut, SoftwareVersionOut) {
  'use strict';

  /**
   * Admin service.
   * @module api/AdminApi
   * @version 2.0.15
   */

  /**
   * Constructs a new AdminApi. 
   * @alias module:api/AdminApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the anonymize operation.
     * @callback module:api/AdminApi~anonymizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate anonymization for a source.
     * @param {String} source 
     * @param {Boolean} anonymized 
     * @param {module:api/AdminApi~anonymizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.anonymize = function(source, anonymized, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling anonymize");
      }

      // verify the required parameter 'anonymized' is set
      if (anonymized === undefined || anonymized === null) {
        throw new Error("Missing the required parameter 'anonymized' when calling anonymize");
      }


      var pathParams = {
        'source': source,
        'anonymized': anonymized
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/anonymize/{source}/{anonymized}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatus operation.
     * @callback module:api/AdminApi~apiStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIClassifiersStatusOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
     * @param {module:api/AdminApi~apiStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIClassifiersStatusOut}
     */
    this.apiStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIClassifiersStatusOut;

      return this.apiClient.callApi(
        '/api2/json/apiStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsage operation.
     * @callback module:api/AdminApi~apiUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print current API usage.
     * @param {module:api/AdminApi~apiUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPeriodUsageOut}
     */
    this.apiUsage = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIPeriodUsageOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistory operation.
     * @callback module:api/AdminApi~apiUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIUsageHistoryOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage.
     * @param {module:api/AdminApi~apiUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIUsageHistoryOut}
     */
    this.apiUsageHistory = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIUsageHistoryOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsageHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistoryAggregate operation.
     * @callback module:api/AdminApi~apiUsageHistoryAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIUsageAggregatedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     * @param {module:api/AdminApi~apiUsageHistoryAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIUsageAggregatedOut}
     */
    this.apiUsageHistoryAggregate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIUsageAggregatedOut;

      return this.apiClient.callApi(
        '/api2/json/apiUsageHistoryAggregate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the availableServices operation.
     * @callback module:api/AdminApi~availableServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIServicesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of classification services and usage cost in Units per classification (default is 1&#x3D;ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
     * @param {module:api/AdminApi~availableServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIServicesOut}
     */
    this.availableServices = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIServicesOut;

      return this.apiClient.callApi(
        '/api2/json/apiServices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disable operation.
     * @callback module:api/AdminApi~disableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate an API Key.
     * @param {String} source The API Key to set as enabled/disabled.
     * @param {Boolean} disabled 
     * @param {module:api/AdminApi~disableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disable = function(source, disabled, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling disable");
      }

      // verify the required parameter 'disabled' is set
      if (disabled === undefined || disabled === null) {
        throw new Error("Missing the required parameter 'disabled' when calling disable");
      }


      var pathParams = {
        'source': source,
        'disabled': disabled
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/disable/{source}/{disabled}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the learnable operation.
     * @callback module:api/AdminApi~learnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate learning from a source.
     * @param {String} source The API Key to set as learnable/non learnable.
     * @param {Boolean} learnable 
     * @param {module:api/AdminApi~learnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.learnable = function(source, learnable, callback) {
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling learnable");
      }

      // verify the required parameter 'learnable' is set
      if (learnable === undefined || learnable === null) {
        throw new Error("Missing the required parameter 'learnable' when calling learnable");
      }


      var pathParams = {
        'source': source,
        'learnable': learnable
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api2/json/learnable/{source}/{learnable}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the softwareVersion operation.
     * @callback module:api/AdminApi~softwareVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareVersionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current software version
     * @param {module:api/AdminApi~softwareVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareVersionOut}
     */
    this.softwareVersion = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SoftwareVersionOut;

      return this.apiClient.callApi(
        '/api2/json/softwareVersion', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the taxonomyClasses operation.
     * @callback module:api/AdminApi~taxonomyClassesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIClassifierTaxonomyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print the taxonomy classes valid for the given classifier.
     * @param {String} classifierName 
     * @param {module:api/AdminApi~taxonomyClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIClassifierTaxonomyOut}
     */
    this.taxonomyClasses = function(classifierName, callback) {
      var postBody = null;

      // verify the required parameter 'classifierName' is set
      if (classifierName === undefined || classifierName === null) {
        throw new Error("Missing the required parameter 'classifierName' when calling taxonomyClasses");
      }


      var pathParams = {
        'classifierName': classifierName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = APIClassifierTaxonomyOut;

      return this.apiClient.callApi(
        '/api2/json/taxonomyClasses/{classifierName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
