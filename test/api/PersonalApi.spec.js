/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.PersonalApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PersonalApi', function() {
    describe('country', function() {
      it('should call country successfully', function(done) {
        //uncomment below and update the code to test country
        //instance.country(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countryBatch', function() {
      it('should call countryBatch successfully', function(done) {
        //uncomment below and update the code to test countryBatch
        //instance.countryBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('diaspora', function() {
      it('should call diaspora successfully', function(done) {
        //uncomment below and update the code to test diaspora
        //instance.diaspora(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('diasporaBatch', function() {
      it('should call diasporaBatch successfully', function(done) {
        //uncomment below and update the code to test diasporaBatch
        //instance.diasporaBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gender', function() {
      it('should call gender successfully', function(done) {
        //uncomment below and update the code to test gender
        //instance.gender(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderBatch', function() {
      it('should call genderBatch successfully', function(done) {
        //uncomment below and update the code to test genderBatch
        //instance.genderBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderFull', function() {
      it('should call genderFull successfully', function(done) {
        //uncomment below and update the code to test genderFull
        //instance.genderFull(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderFullBatch', function() {
      it('should call genderFullBatch successfully', function(done) {
        //uncomment below and update the code to test genderFullBatch
        //instance.genderFullBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderFullGeo', function() {
      it('should call genderFullGeo successfully', function(done) {
        //uncomment below and update the code to test genderFullGeo
        //instance.genderFullGeo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderFullGeoBatch', function() {
      it('should call genderFullGeoBatch successfully', function(done) {
        //uncomment below and update the code to test genderFullGeoBatch
        //instance.genderFullGeoBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderGeo', function() {
      it('should call genderGeo successfully', function(done) {
        //uncomment below and update the code to test genderGeo
        //instance.genderGeo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('genderGeoBatch', function() {
      it('should call genderGeoBatch successfully', function(done) {
        //uncomment below and update the code to test genderGeoBatch
        //instance.genderGeoBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('origin', function() {
      it('should call origin successfully', function(done) {
        //uncomment below and update the code to test origin
        //instance.origin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('originBatch', function() {
      it('should call originBatch successfully', function(done) {
        //uncomment below and update the code to test originBatch
        //instance.originBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parseName', function() {
      it('should call parseName successfully', function(done) {
        //uncomment below and update the code to test parseName
        //instance.parseName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parseNameBatch', function() {
      it('should call parseNameBatch successfully', function(done) {
        //uncomment below and update the code to test parseNameBatch
        //instance.parseNameBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parseNameGeo', function() {
      it('should call parseNameGeo successfully', function(done) {
        //uncomment below and update the code to test parseNameGeo
        //instance.parseNameGeo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parseNameGeoBatch', function() {
      it('should call parseNameGeoBatch successfully', function(done) {
        //uncomment below and update the code to test parseNameGeoBatch
        //instance.parseNameGeoBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parsedGenderBatch', function() {
      it('should call parsedGenderBatch successfully', function(done) {
        //uncomment below and update the code to test parsedGenderBatch
        //instance.parsedGenderBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parsedGenderGeoBatch', function() {
      it('should call parsedGenderGeoBatch successfully', function(done) {
        //uncomment below and update the code to test parsedGenderGeoBatch
        //instance.parsedGenderGeoBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usRaceEthnicity', function() {
      it('should call usRaceEthnicity successfully', function(done) {
        //uncomment below and update the code to test usRaceEthnicity
        //instance.usRaceEthnicity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usRaceEthnicityBatch', function() {
      it('should call usRaceEthnicityBatch successfully', function(done) {
        //uncomment below and update the code to test usRaceEthnicityBatch
        //instance.usRaceEthnicityBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usRaceEthnicityZIP5', function() {
      it('should call usRaceEthnicityZIP5 successfully', function(done) {
        //uncomment below and update the code to test usRaceEthnicityZIP5
        //instance.usRaceEthnicityZIP5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usZipRaceEthnicityBatch', function() {
      it('should call usZipRaceEthnicityBatch successfully', function(done) {
        //uncomment below and update the code to test usZipRaceEthnicityBatch
        //instance.usZipRaceEthnicityBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
