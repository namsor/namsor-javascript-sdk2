/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.15
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.AdminApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminApi', function() {
    describe('anonymize', function() {
      it('should call anonymize successfully', function(done) {
        //uncomment below and update the code to test anonymize
        //instance.anonymize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiStatus', function() {
      it('should call apiStatus successfully', function(done) {
        //uncomment below and update the code to test apiStatus
        //instance.apiStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiUsage', function() {
      it('should call apiUsage successfully', function(done) {
        //uncomment below and update the code to test apiUsage
        //instance.apiUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiUsageHistory', function() {
      it('should call apiUsageHistory successfully', function(done) {
        //uncomment below and update the code to test apiUsageHistory
        //instance.apiUsageHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiUsageHistoryAggregate', function() {
      it('should call apiUsageHistoryAggregate successfully', function(done) {
        //uncomment below and update the code to test apiUsageHistoryAggregate
        //instance.apiUsageHistoryAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('availableServices', function() {
      it('should call availableServices successfully', function(done) {
        //uncomment below and update the code to test availableServices
        //instance.availableServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disable', function() {
      it('should call disable successfully', function(done) {
        //uncomment below and update the code to test disable
        //instance.disable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('learnable', function() {
      it('should call learnable successfully', function(done) {
        //uncomment below and update the code to test learnable
        //instance.learnable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('softwareVersion', function() {
      it('should call softwareVersion successfully', function(done) {
        //uncomment below and update the code to test softwareVersion
        //instance.softwareVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taxonomyClasses', function() {
      it('should call taxonomyClasses successfully', function(done) {
        //uncomment below and update the code to test taxonomyClasses
        //instance.taxonomyClasses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
