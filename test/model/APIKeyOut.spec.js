/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.APIKeyOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIKeyOut', function() {
    it('should create an instance of APIKeyOut', function() {
      // uncomment below and update the code to test APIKeyOut
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be.a(NamSorApiV2.APIKeyOut);
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property vetted (base name: "vetted")', function() {
      // uncomment below and update the code to test the property vetted
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property learnable (base name: "learnable")', function() {
      // uncomment below and update the code to test the property learnable
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property anonymized (base name: "anonymized")', function() {
      // uncomment below and update the code to test the property anonymized
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property partner (base name: "partner")', function() {
      // uncomment below and update the code to test the property partner
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property striped (base name: "striped")', function() {
      // uncomment below and update the code to test the property striped
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property corporate (base name: "corporate")', function() {
      // uncomment below and update the code to test the property corporate
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new NamSorApiV2.APIKeyOut();
      //expect(instance).to.be();
    });

  });

}));
