/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.BillingInfoInOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BillingInfoInOut', function() {
    it('should create an instance of BillingInfoInOut', function() {
      // uncomment below and update the code to test BillingInfoInOut
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be.a(NamSorApiV2.BillingInfoInOut);
    });

    it('should have the property billingEmail (base name: "billingEmail")', function() {
      // uncomment below and update the code to test the property billingEmail
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property preferredCurrency (base name: "preferredCurrency")', function() {
      // uncomment below and update the code to test the property preferredCurrency
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property customerName (base name: "customerName")', function() {
      // uncomment below and update the code to test the property customerName
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property customerPhone (base name: "customerPhone")', function() {
      // uncomment below and update the code to test the property customerPhone
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressLine1 (base name: "addressLine1")', function() {
      // uncomment below and update the code to test the property addressLine1
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressLine2 (base name: "addressLine2")', function() {
      // uncomment below and update the code to test the property addressLine2
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressCity (base name: "addressCity")', function() {
      // uncomment below and update the code to test the property addressCity
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressPostalCode (base name: "addressPostalCode")', function() {
      // uncomment below and update the code to test the property addressPostalCode
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressState (base name: "addressState")', function() {
      // uncomment below and update the code to test the property addressState
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property addressCountry (base name: "addressCountry")', function() {
      // uncomment below and update the code to test the property addressCountry
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

    it('should have the property vatID (base name: "vatID")', function() {
      // uncomment below and update the code to test the property vatID
      //var instance = new NamSorApiV2.BillingInfoInOut();
      //expect(instance).to.be();
    });

  });

}));
