/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.13
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.APIPlanSubscriptionOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIPlanSubscriptionOut', function() {
    it('should create an instance of APIPlanSubscriptionOut', function() {
      // uncomment below and update the code to test APIPlanSubscriptionOut
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be.a(NamSorApiV2.APIPlanSubscriptionOut);
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planStarted (base name: "planStarted")', function() {
      // uncomment below and update the code to test the property planStarted
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property priorPlanStarted (base name: "priorPlanStarted")', function() {
      // uncomment below and update the code to test the property priorPlanStarted
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planEnded (base name: "planEnded")', function() {
      // uncomment below and update the code to test the property planEnded
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property taxRate (base name: "taxRate")', function() {
      // uncomment below and update the code to test the property taxRate
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planName (base name: "planName")', function() {
      // uncomment below and update the code to test the property planName
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planBaseFeesKey (base name: "planBaseFeesKey")', function() {
      // uncomment below and update the code to test the property planBaseFeesKey
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planStatus (base name: "planStatus")', function() {
      // uncomment below and update the code to test the property planStatus
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property planQuota (base name: "planQuota")', function() {
      // uncomment below and update the code to test the property planQuota
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property priceUSD (base name: "priceUSD")', function() {
      // uncomment below and update the code to test the property priceUSD
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property priceOverageUSD (base name: "priceOverageUSD")', function() {
      // uncomment below and update the code to test the property priceOverageUSD
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property priceOverage (base name: "priceOverage")', function() {
      // uncomment below and update the code to test the property priceOverage
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property currencyFactor (base name: "currencyFactor")', function() {
      // uncomment below and update the code to test the property currencyFactor
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property stripeCustomerId (base name: "stripeCustomerId")', function() {
      // uncomment below and update the code to test the property stripeCustomerId
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property stripeStatus (base name: "stripeStatus")', function() {
      // uncomment below and update the code to test the property stripeStatus
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property stripeSubscription (base name: "stripeSubscription")', function() {
      // uncomment below and update the code to test the property stripeSubscription
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new NamSorApiV2.APIPlanSubscriptionOut();
      //expect(instance).to.be();
    });

  });

}));
