/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.ClassifierMetricsOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClassifierMetricsOut', function() {
    it('should create an instance of ClassifierMetricsOut', function() {
      // uncomment below and update the code to test ClassifierMetricsOut
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be.a(NamSorApiV2.ClassifierMetricsOut);
    });

    it('should have the property softwareVersion (base name: "softwareVersion")', function() {
      // uncomment below and update the code to test the property softwareVersion
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property hostAddress (base name: "hostAddress")', function() {
      // uncomment below and update the code to test the property hostAddress
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property learnQueueSize (base name: "learnQueueSize")', function() {
      // uncomment below and update the code to test the property learnQueueSize
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property bufferSize (base name: "bufferSize")', function() {
      // uncomment below and update the code to test the property bufferSize
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property preClassifyQueueSize (base name: "preClassifyQueueSize")', function() {
      // uncomment below and update the code to test the property preClassifyQueueSize
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property factKeysSize (base name: "factKeysSize")', function() {
      // uncomment below and update the code to test the property factKeysSize
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property factsLearned (base name: "factsLearned")', function() {
      // uncomment below and update the code to test the property factsLearned
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property classifyDurationsCurrent (base name: "classifyDurationsCurrent")', function() {
      // uncomment below and update the code to test the property classifyDurationsCurrent
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property classifyDurationsSummary (base name: "classifyDurationsSummary")', function() {
      // uncomment below and update the code to test the property classifyDurationsSummary
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property learnDurationsCurrent (base name: "learnDurationsCurrent")', function() {
      // uncomment below and update the code to test the property learnDurationsCurrent
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property learnDurationsSummary (base name: "learnDurationsSummary")', function() {
      // uncomment below and update the code to test the property learnDurationsSummary
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property classifierName (base name: "classifierName")', function() {
      // uncomment below and update the code to test the property classifierName
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property featuresSize (base name: "featuresSize")', function() {
      // uncomment below and update the code to test the property featuresSize
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiVettedEstimateTotal (base name: "aiVettedEstimateTotal")', function() {
      // uncomment below and update the code to test the property aiVettedEstimateTotal
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiVettedEstimatePrecision (base name: "aiVettedEstimatePrecision")', function() {
      // uncomment below and update the code to test the property aiVettedEstimatePrecision
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiVettedEstimateRecall (base name: "aiVettedEstimateRecall")', function() {
      // uncomment below and update the code to test the property aiVettedEstimateRecall
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiVettedLearnTotal (base name: "aiVettedLearnTotal")', function() {
      // uncomment below and update the code to test the property aiVettedLearnTotal
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiNonVettedEstimateTotal (base name: "aiNonVettedEstimateTotal")', function() {
      // uncomment below and update the code to test the property aiNonVettedEstimateTotal
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiNonVettedEstimatePrecision (base name: "aiNonVettedEstimatePrecision")', function() {
      // uncomment below and update the code to test the property aiNonVettedEstimatePrecision
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiNonVettedEstimateRecall (base name: "aiNonVettedEstimateRecall")', function() {
      // uncomment below and update the code to test the property aiNonVettedEstimateRecall
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiNonVettedLearnTotal (base name: "aiNonVettedLearnTotal")', function() {
      // uncomment below and update the code to test the property aiNonVettedLearnTotal
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property metricTimeStamp (base name: "metricTimeStamp")', function() {
      // uncomment below and update the code to test the property metricTimeStamp
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiStartTime (base name: "aiStartTime")', function() {
      // uncomment below and update the code to test the property aiStartTime
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiVettedExpectedClassMetrics (base name: "aiVettedExpectedClassMetrics")', function() {
      // uncomment below and update the code to test the property aiVettedExpectedClassMetrics
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

    it('should have the property aiNonVettedExpectedClassMetrics (base name: "aiNonVettedExpectedClassMetrics")', function() {
      // uncomment below and update the code to test the property aiNonVettedExpectedClassMetrics
      //var instance = new NamSorApiV2.ClassifierMetricsOut();
      //expect(instance).to.be();
    });

  });

}));
