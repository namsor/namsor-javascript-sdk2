/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FirstLastNamePhoneCodedOut', function() {
    it('should create an instance of FirstLastNamePhoneCodedOut', function() {
      // uncomment below and update the code to test FirstLastNamePhoneCodedOut
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be.a(NamSorApiV2.FirstLastNamePhoneCodedOut);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property internationalPhoneNumberVerified (base name: "internationalPhoneNumberVerified")', function() {
      // uncomment below and update the code to test the property internationalPhoneNumberVerified
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneCountryIso2Verified (base name: "phoneCountryIso2Verified")', function() {
      // uncomment below and update the code to test the property phoneCountryIso2Verified
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneCountryCode (base name: "phoneCountryCode")', function() {
      // uncomment below and update the code to test the property phoneCountryCode
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneCountryCodeAlt (base name: "phoneCountryCodeAlt")', function() {
      // uncomment below and update the code to test the property phoneCountryCodeAlt
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneCountryIso2 (base name: "phoneCountryIso2")', function() {
      // uncomment below and update the code to test the property phoneCountryIso2
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneCountryIso2Alt (base name: "phoneCountryIso2Alt")', function() {
      // uncomment below and update the code to test the property phoneCountryIso2Alt
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property originCountryIso2 (base name: "originCountryIso2")', function() {
      // uncomment below and update the code to test the property originCountryIso2
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property originCountryIso2Alt (base name: "originCountryIso2Alt")', function() {
      // uncomment below and update the code to test the property originCountryIso2Alt
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "phoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property verified (base name: "verified")', function() {
      // uncomment below and update the code to test the property verified
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

    it('should have the property countryIso2 (base name: "countryIso2")', function() {
      // uncomment below and update the code to test the property countryIso2
      //var instance = new NamSorApiV2.FirstLastNamePhoneCodedOut();
      //expect(instance).to.be();
    });

  });

}));
