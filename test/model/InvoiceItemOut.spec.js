/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.10
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.InvoiceItemOut();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InvoiceItemOut', function() {
    it('should create an instance of InvoiceItemOut', function() {
      // uncomment below and update the code to test InvoiceItemOut
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be.a(NamSorApiV2.InvoiceItemOut);
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property subscription (base name: "subscription")', function() {
      // uncomment below and update the code to test the property subscription
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionItem (base name: "subscriptionItem")', function() {
      // uncomment below and update the code to test the property subscriptionItem
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property invoiceItemType (base name: "invoiceItemType")', function() {
      // uncomment below and update the code to test the property invoiceItemType
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property planNickname (base name: "planNickname")', function() {
      // uncomment below and update the code to test the property planNickname
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property planDesc (base name: "planDesc")', function() {
      // uncomment below and update the code to test the property planDesc
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

    it('should have the property planName (base name: "planName")', function() {
      // uncomment below and update the code to test the property planName
      //var instance = new NamSorApiV2.InvoiceItemOut();
      //expect(instance).to.be();
    });

  });

}));
